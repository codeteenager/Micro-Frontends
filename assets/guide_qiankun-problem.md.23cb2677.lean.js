import{_ as e,v as a,b as o,R as n}from"./chunks/framework.c16e5371.js";const m=JSON.parse('{"title":"qiankun落地问题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/qiankun-problem.md","filePath":"guide/qiankun-problem.md","lastUpdated":1697382331000}'),i={name:"guide/qiankun-problem.md"},t=n('<h1 id="qiankun落地问题" tabindex="-1">qiankun落地问题 <a class="header-anchor" href="#qiankun落地问题" aria-label="Permalink to &quot;qiankun落地问题&quot;">​</a></h1><h2 id="样式隔离问题" tabindex="-1">样式隔离问题 <a class="header-anchor" href="#样式隔离问题" aria-label="Permalink to &quot;样式隔离问题&quot;">​</a></h2><p>qiankun的样式隔离问题大都是组件的一些弹窗默认是挂载到 body 上的，这就导致了再使用微前端集成的时候，子应用的弹窗逃逸，导致无法控制其弹窗的样式。</p><p>原因主要是使用了qiankun提供的样式隔离方案：</p><ol><li>配置<code>strictStyleIsolation:true</code>的方式开启运行时的scoped css功能，实现形式为将整个子应用放到shadow DOM中进行嵌入，完全隔离了主子应用。</li></ol><p>缺点：子应用的弹框、抽屉、popover等因找不到主应用的body会丢失或样式不对</p><ol start="2"><li>添加<code>experimentalStyleIsolation:true</code>属性，实现形式类似于vue中style标签中的scoped属性，qiankun会为子应用所有的样式添加后缀，如<code>div[qiankun-child]</code>。</li></ol><p>缺点：子应用的弹框、抽屉、popover等因插入到主应用的body中，所以导致样式丢失或应用了主应用的样式。</p><p>找到根本的原因，其实就好解决了。</p><p>在乾坤出现之前，饿了么组件就已经用的很多了，但是当时的组件设计师们，也没有考虑到后续会有这种微前端集成的需求，再加上现在组件维护不及时，所以就导致现在网上流行说的这些坑。例如 antd 下通过 ConfigProvider getPopupContainer 指定弹框渲染的范围，这样就解决了上面说的逃逸问题。</p><p>或者重写了子应用的 document.body.appendChild，让dialog挂载到子应用的节点中，如果有多应用保活，重写后的appendChild会导致其他子应用也挂载到重写的那个子应用中，导致其他子应用出现dialog消失的问题。</p>',11),d=[t];function p(r,s,l,u,c,h){return a(),o("div",null,d)}const k=e(i,[["render",p]]);export{m as __pageData,k as default};
